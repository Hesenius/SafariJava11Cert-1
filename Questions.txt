Q) Which are legal

A)
class X { var x = 99; }

B) void doStuff(var x) { }

C) void doStuff() {
  var x;
  x = 100;
}

D) void doStuff() {
  var x = 100;
}

E) void doStuff() {
  var x = { 1, 2, 3 };
}

Q) Which are legal:
A) void doStuff() {
     var x = new int[]{ 1, 2, 3 };
   }
B) void doStuff() {
     var [] x = new int[]{ 1, 2, 3 };
   }
C) void doStuff() {
     var x = 99;
     x = "Hello";
   }
D) void doStuff() {
     var x = 1, y = 2;
   }
E)   void doStuff() {
     try {
      // stuff happens
      } catch (var ex) {
      }
   }

Q) Which are legal
    A)
       for (var x = 0; x < 3; x++)
         System.out.println(x);
    B)
       try (var in = new FileReader("");
            var out = new FileWriter("")) {
       }
    C)
       var var = "var";

Q) Which are legal:
A) { int x; }
   { int x; }
B) class X {
        { sout(x); }
        int x;
      }
C) {
        int x;
        { int x; }
      }
D) {
        int x;
        Predicate<String> ps = x -> true;
      }
E) for (int x = 0; x < 10; x++)
        ;
       int x;

Q) Which print "true"
   A) String s = "Hello";
      String t = "He";
      t += "llo";
      sout(s == t);
   B) String s = "Hello";
      String t = "He";
      t += "llo";
      sout(s.equals(t));
   C) StringBuilder s = new StringBuilder("Hello");
      StringBuilder t = new StringBuilder("He");
      t.append("llo");
      sout(s.equals(t));
   D) List<String> ls = List.of("Fred", "Jim");
      List<String> ls2 = new ArrayList<>(ls);
      sout(ls.equals(ls2));
   E) LocalDate ld = LocalDate.of(2021, 3, 29);
      LocalDate ld2 = LocalDate.of(2021, 3, 29);
      sout(ld.equals(ld2));

Q) Given
     void doStuff() throws IOException {};
     void doStuff2() throws FileNotFoundException {};
And:
     void tryStuff() {
       try {
         doStuff();
         doStuff2();
       } enter code here {
         // handle both exceptions
       }
     }
   What can be inserted at "enter code here"
   to provide handling of exceptions from both
   methods?
   A) catch (IOException | FileNotFoundException e)
   B) catch (FileNotFoundException | IOException e)
   C) catch (FileNotFoundException e)
   D) catch (IOException e)
   E) finally

Q) Given
     void doStuff() throws SQLException {};
     void doStuff2() throws FileNotFoundException {};
   And:
     void tryStuff() ...insert here... {
       try {
         doStuff();
         doStuff2();
       } catch (SQLException | FileNotFoundException e) {
         throw e;
       }
     }

   What is best at "...insert here..."?
   A) throws Exception
   B) throws SQLException
   C) throws FileNotFoundException
   D) throws FileNotFoundException, SQLException
   E) nothing is needed, compilation succeeds as is

Q) Given
   class AC implements AutoCloseable {
     private String name;
     public AC(String name) { this.name = name; }
     @Override public void close() {
       System.out.println("Closing " + name);
     }
   }
And:
       var ac0 = new AC("zero");
       try (var ac1 = new AC("one"); var ac2 = new AC("two"); ac0; ){ }

What is the result?
   A) Compilation fails
   B) Closing zero Closing two Closing one
   C) Closing zero Closing one Closing two
   D) Closing two Closing one Closing zero
   E) Closing one Closing two Closing zero

Q) Given
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E
and:
  void tryStuff() {
    doStuff(1, 2);
  }

Given all five methods exist, which is invoked by the invocation
in the body of method tryStuff()?

Q) What happens if method A is deleted?

  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E
and:
  void tryStuff() {
    doStuff(1, 2);
  }

A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails

Q)
What happens if methods A and B are deleted?

  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E
and:
  void tryStuff() {
    doStuff(1, 2);
  }

  A) Method C is invoked
  B) Method D is invoked
  C) Method E is invoked
  D) Compilation fails


Liskov substitution says: if a is a B then a must substitute for B without
causing surprises -- primarily relates to overriding

Q) Given
     public int getValue() {return 1;}

which of these methods may individually be added to a subclass of this class?

     A) public int getValue(int x) {return 1;}
     B) public String getValue() {return "Hello";}
     C) public String getValue(int x) {return "Hello";}

Q) Given
     class Base2 {
       void doBaseStuff() {
         System.out.println("doBaseStuff");
       }
     }
     class Sub2 extends Base2 {
       void doBaseStuff(int x) {
         System.out.println("doSubStuff");
       }
     }

In the Base2 and Sub2 classes, which are true in isolation?

A) doBaseStuff in Base2 can be marked public without causing errors
B) doBaseStuff in Base2 can be marked private without causing errors
C) doBaseStuff in Sub2 can be marked public without causing errors
D) doBaseStuff in Sub2 can be marked protected without causing errors
E) doBaseStuff in Sub2 can be marked private without causing errors

Q) Given
     class Base2 {
       void doBaseStuff() {
         System.out.println("doBaseStuff");
       }
     }
     class Sub2 extends Base2 {
       void doBaseStuff() {
         System.out.println("doSubStuff");
       }
     }

In the Base2 and Sub2 classes, which are true in isolation?

A) doBaseStuff in Base2 can be marked public without causing errors
B) doBaseStuff in Base2 can be marked private without causing errors
C) doBaseStuff in Sub2 can be marked public without causing errors
D) doBaseStuff in Sub2 can be marked protected without causing errors
E) doBaseStuff in Sub2 can be marked private without causing errors

Q) Given
     class Base2 {
       void doBaseStuff() {
         System.out.println("doBaseStuff");
       }
     }
     class Sub2 extends Base2 {
       void doBaseStuff() {
         System.out.println("doSubStuff");
       }
     }

In the Base and Sub classes, which are true in isolation?
A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Given:
  class Q24Base {
    public int get() {
      return 0;
    }
  }

  class Q24Sub extends Q24Base {}

  Which methods may individually be added to this class?
  A) public long get() { return 1; }
  B) public short get() { return 1; }
  C) public Q24Base get() { return null; }
  D) None of these

Q) Given:
  public Object getValue() {
    return null;
  }

Which of these methods may individually be added to a subclass of this class?
  A) public int getValue(int x) {return 1;}
  B) public Object getValue() {return "Hello";}
  C) public String getValue() {return "Hello";}

Q) Given:
     class Q25Base {
       int x = 99;
       { System.out.println("x is " + x); }
     }
     class Q25Sub extends Q25Base {
     // implicit super()
       Q25Sub(int x) { System.out.println("in constructor, x is " + x); }
       public static void go() { new Q25Sub(1); }
     }

Given a call to go(), what is the result?
A) in constructor, x is 1
  x is 99
B) x is 99
  in constructor, x is 1
C) x is 99
  in constructor, x is 99
D) Compilation fails

Q) Given:
interface Int1 {
  default void doStuff() { System.out.println("Int1.doStuff()"); }
}
class Cl1 implements Int1 {
  void doStuff() { System.out.println("Cl1.doStuff"); }
}
What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
interface Int1 {
  default void doStuff() { System.out.println("Int1.doStuff()"); }
}

class Cl1 implements Int1 {
}

What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
   interface IntA {
     default void doStuff() { System.out.println("IntA.doStuff()"); }
   }
   interface IntB {
     default void doStuff() { System.out.println("IntB.doStuff()"); }
   }
   class ClA implements IntA, IntB {
     public void doStuff() { System.out.println("ClA.doStuff"); }
   }
What is the result of a call:
       new ClA().doStuff();
A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) ClA.doStuff()

Q) Given:
 @FunctionalInterface
 interface StudentCriterion {
   boolean test(Student s);
 }

and:
 class Student {
   public int getGpa() { return 0; }
   public List<String> getCourses() { return null; }
 }

Which are legal (individually):
A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
B) StudentCriterion sc = s -> { s.getGpa() > 3 };
C) Object sc = s -> {return s.getGpa() > 3;};
D) StudentCriterion sc = (s) -> s.getGpa() > 3;
E) StudentCriterion sc = s -> s.getCourses().size();

Q)   Which are legal individually:
A) Function<String, String> fss = s -> { System.out.println(s); };
B) Consumer<String> cs = s -> { System.out.println(s); };
C) Supplier<String> ss = (s1, s2) -> s1 + s2;
D) BiPredicate<String> bps = (String s) -> { return s.length() > 0; };
E) ToIntFunction<String> tofs = s -> s.length();

Q) Given:
     public static Predicate<String> getOne(int x) {
       return new Predicate<String>() {
         @Override
         public boolean test(String s) {
           return s.length() >= ++x;
         }
       };
     }
and:
       System.out.println(
           List.of("Fred", "Jim", "Sheila")
               .removeIf(getOne(3)));
What is the result?
  A) true
  B) [Fred, Jim]
  C) [Jim]
  D) Compilation fails
  E) Exception at runtime